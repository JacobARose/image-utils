# medium_image_aug_conf.yaml




defaults:
    - _self_
    - normalization@normalization: imagenet

preprocess_size: ${int:${hp.preprocess_size}}
resolution: ${int:${hp.resolution}}
# num_channels: ${int:${hp.num_channels}}
normalization:
    mean: [0.0, 0.0, 0.0]
    std: [1.0, 1.0, 1.0]
skip_augmentations: false


channels:
    to_grayscale: ${hp.to_grayscale}
    num_output_channels: ${int:${hp.num_channels}}


train:

    smallest_max_size:
        _target_: albumentations.SmallestMaxSize
        max_size: ${int:${hp.preprocess_size}}
        p: 1.0
    vertical_flip:
        _target_: albumentations.VerticalFlip
        p: 0.5
    horizontal_flip:
        _target_: albumentations.HorizontalFlip
        p: 0.5
    shift_scale_rotate:
        _target_: albumentations.ShiftScaleRotate
        shift_limit: 0.15
        scale_limit: 0.15
        rotate_limit: 45
        p: 0.6
    random_crop:
        _target_: albumentations.RandomCrop
        height: ${int:${hp.resolution}}
        width: ${int:${hp.resolution}}
        p: 1.0
    random_brightness_contrast:
        _target_: albumentations.RandomBrightnessContrast
        brightness_limit: 0.2
        contrast_limit: 0.2
        brightness_by_max: false
        # brightness_by_max: true
        always_apply: false
        p: 0.6
    normalize:
        _target_: albumentations.Normalize
        mean: ${...normalization.mean}
        std: ${...normalization.std}
        p: 1.0
        # mean: [0.0, 0.0, 0.0]
        # std: [1.0, 1.0, 1.0]
        # mean: [0.485, 0.456, 0.406]
        # std: [0.229, 0.224, 0.225]
    to_tensor:
        _target_: albumentations.pytorch.ToTensorV2


val:
    # to_tensor:
    #     _target_: albumentations.pytorch.ToTensorV2
    smallest_max_size:
        _target_: albumentations.SmallestMaxSize
        max_size: ${int:${hp.preprocess_size}}
        p: 1.0
    center_crop:
        _target_: albumentations.CenterCrop
        height: ${int:${hp.resolution}}
        width: ${int:${hp.resolution}}
        p: 1.0
    normalize:
        _target_: albumentations.Normalize
        mean: ${...normalization.mean}
        std: ${...normalization.std}
        p: 1.0
        # mean: [0.485, 0.456, 0.406]
        # std: [0.229, 0.224, 0.225]
    to_tensor:
        _target_: albumentations.pytorch.ToTensorV2

test: ${.val}

